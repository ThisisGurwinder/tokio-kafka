use std::net::ToSocketAddrs;

use compression::Compression;
use protocol::RequiredAcks;

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProducerConfig<A>
    where A: ToSocketAddrs
{
    /// A list of host/port pairs to use for establishing the initial connection to the Kafka cluster.
    #[serde(rename = "bootstrap.servers")]
    pub hosts: Vec<A>,

    /// An id string to pass to the server when making requests.
    #[serde(rename = "client.id")]
    pub client_id: Option<String>,

    /// Setting a value greater than zero will cause the client to resend any record
    /// whose send fails with a potentially transient error.
    pub retries: usize,

    /// The number of acknowledgments the producer requires the leader
    /// to have received before considering a request complete.
    pub acks: RequiredAcks,

    /// The compression type for all data generated by the producer.
    #[serde(rename = "compression.type")]
    pub compression: Compression,

    /// The producer will attempt to batch records together into fewer requests
    /// whenever multiple records are being sent to the same partition.
    #[serde(rename ="batch.size")]
    pub batch_size: usize,

    /// The maximum size of a request in bytes.
    #[serde(rename ="max.request.size")]
    pub max_request_size: usize,
}

impl<A> Default for ProducerConfig<A>
    where A: ToSocketAddrs
{
    fn default() -> Self {
        ProducerConfig {
            hosts: vec![],
            client_id: None,
            retries: 0,
            acks: RequiredAcks::One,
            compression: Compression::None,
            batch_size: 16 * 1024,
            max_request_size: 1024 * 1024,
        }
    }
}

impl<A> ProducerConfig<A>
    where A: ToSocketAddrs + Clone
{
    pub fn from_hosts(hosts: &[A]) -> Self {
        ProducerConfig {
            hosts: hosts.to_vec(),
            ..Default::default()
        }
    }
}

#[cfg(test)]
mod tests {
    extern crate serde_json;

    use super::*;

    #[test]
    fn test_serialize() {
        let config = ProducerConfig::default();
        let json = r#"{
  "bootstrap.servers": [],
  "client.id": null,
  "retries": 0,
  "acks": "one",
  "compression.type": "none",
  "batch.size": 16384,
  "max.request.size": 1048576
}"#;

        assert_eq!(serde_json::to_string_pretty(&config).unwrap(), json);
        assert_eq!(serde_json::from_str::<ProducerConfig<String>>(json).unwrap(),
                   config);
    }
}